{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/home/tiaan/Documents/Projects/robot-buddies-pwa/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAASA,mBAAT,EACUC,sBADV,EAEUC,sBAFV,EAGUC,qBAHV,QAIe,gBAJf;AAMA,OAAO,MAAOC,cAAc,GAAIC,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAEN,mBADkC;AAExCO,EAAAA,OAAO,EAAGF;AAF8B,CAAX,CAAxB;AAKP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACCS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACAC,IADA,CACKC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADjB,EAEAF,IAFA,CAEKG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA8BK,IAAAA,OAAO,EAAEO;AAAvC,GAAD,CAFrB,EAGAC,KAHA,CAGMC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,OAAO,EAAES;AAAvC,GAAD,CAHvB;AAIA,CANI","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n          REQUEST_ROBOTS_PENDING,\n          REQUEST_ROBOTS_SUCCESS,\n          REQUEST_ROBOTS_FAILED }\n          from './constants.js'\n\nexport const  setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload : text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n   fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n  }\n"]},"metadata":{},"sourceType":"module"}