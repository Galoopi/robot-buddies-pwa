{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/Searchbox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","phone","react_default","a","createElement","className","src","concat","alt","href","CardList","robots","cardComponent","map","user","i","components_Card","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearch","isPending","filterRobots","filter","robot","toLowerCase","includes","components_Searchbox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","intialStateSearch","intialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09818e5a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id, phone}) => {\n\n  return (\n\n    <div className=\"tc bg-light-gray dib br3 pa3 ma2 grow bw2 shadow-5\">\n\n      <img src={`https://robohash.org/${id}?200x200\" `} alt=\"\"/>\n        <div>\n          <h2>{name} </h2>\n          <p ><a href=\"mailto:{email}\">{email}</a></p>\n          <p>{phone}</p>\n        </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n //  if (true) {\n //    throw new Error('Oh NO!');\n // }\n\n  const cardComponent = robots.map((user, i) => {\n    return (\n    <Card\n      key={i}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n      phone={robots[i].phone}\n      />\n  )\n  })\n\n  return (\n    <div>\n      {cardComponent}\n      </div>\n  )\n}\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll',border :'1px solid black', height: '400px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Searchbox  = ({searchfield,searchChange}) => {\n  return (\n      <div className=\"tc pa2 \">\n\n       <input\n       className=\"pa3 ba b--green bg-lightest-blue br-pill\"\n       type=\"search\"\n       placeholder='search Robots buddies'\n       onChange= {searchChange} //event\n       />\n\n      </div>\n  )\n}\nexport default Searchbox;\n","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError:true})\n  }\n\n  render() {\n    if (this.state.hasError ) {\n      return <h1>Ooops . This is  no good.</h1>\n    }\n    return this.props.children\n  }\n\n}\nexport default ErrorBoundary;\n","import React, {Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport Searchbox from '../components/Searchbox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField,requestRobots } from '../actions';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearch: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearch, robots, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase()) && robot.email.toLowerCase().includes(searchField.toLowerCase());\n\n    })\n\n    return isPending ?\n      <h1>Loading</h1> :\n    (\n      <div className = \"tc\" >\n      <h1 className = \"header tc f1\" > Robot Buddies < /h1>\n      <Searchbox searchChange = {onSearch}/>\n      < Scroll >\n      <ErrorBoundary>\n      <CardList robots = {filterRobots} />\n      </ErrorBoundary>\n      </Scroll>\n      </div>\n    );\n  }setSearchField\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n          REQUEST_ROBOTS_PENDING,\n          REQUEST_ROBOTS_SUCCESS,\n          REQUEST_ROBOTS_FAILED }\n          from './constants.js'\n\nexport const  setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload : text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n   fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n  }\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { CHANGE_SEARCH_FIELD,\n          REQUEST_ROBOTS_PENDING,\n          REQUEST_ROBOTS_SUCCESS,\n          REQUEST_ROBOTS_FAILED } from './constants.js'\n\nconst intialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD :\n        return Object.assign({},state,{searchField: action.payload} ); // new state\n        //or destructuring  return {...state,searchfield: {action.payload}\n    default:\n     return state;\n  }\n}\nconst intialStateRobots = {\n  isPending: false,\n  robots : [],\n  error: ''\n\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({},state,{isPending : true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({},state,{robots: action.payload, isPending:false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({},state,{error: action.payload, isPending:false})\n\n    default:\n  return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider  } from 'react-redux';\nimport { applyMiddleware, createStore ,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './Index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport {searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(<Provider store={store}>\n                <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}